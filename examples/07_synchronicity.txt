
      ( *** LINOLEUM Example 7: Synchronicity *** )

      ( TO COMPILE THIS PROGRAM - WINDOWS PACKAGE:
	--------------------------------------------------------------------
	1. MAKE SURE YOU HAVE INSTALLED THE LINOLEUM COMPILER,	BY LAUNCHING
	   THE REGISTRY FILE CALLED "Install.reg".
	2. CLICK THIS TEXT FILE'S ICON, "07_synchronicity.TXT", WITH THE
	   RIGHT MOUSE BUTTON, SO THAT A POPUP MENU WILL SHOW.
	3. FROM  THE  POPUP  MENU,  SELECT  "COMPILE  AS  LINOLEUM  SOURCE":
	   THE COMPILER WILL START WORKING IN A DOS WINDOW.
	4. WHEN THE COMPILATION PROCESS IS FINISHED, CLOSE THE DOS WINDOW IF
	   NEEDED. YOU'LL NOTICE SOME NEW FILES ARE IN THE EXAMPLE's FOLDER.
	   TIPICALLY, THE NEW FILES ARE "PROGRAM" AND "SMBLSMAP".
	5. CLICK  ON  THE  "PROGRAM"  ICON  TO	RUN  THE  COMPILED  PROGRAM:
	   "PROGRAM" IS,  IN FACTS, THE RESULTING EXECUTABLE FILE.  TO	QUIT
	   ONE OF  THOSE EXAMPLES,  SOMETIMES YOU HAVE TO PRESS A KEY,	SOME
	   OTHER TIMES YOU HAVE  PRESS THE "ESC" KEY,  AND IN  CERTAIN OTHER
	   CASES, TO CLICK ONE OF THE MOUSE'S BUTTONS.
	6. YOU CAN RENAME  "PROGRAM" TO ANY OTHER NAME, IF YOU LIKE, AND YOU
	   CAN CHANGE THE PROGRAM'S  ICON USING THE "ICON EDITOR", PROVIDING
	   YOU WILL FIRST COPY "ICON EDITOR.EXE" INSIDE THIS FOLDER, BECAUSE
	   NO LINOLEUM APPLICATIONS CAN ACCESS FILES OUTSIDE THEIR FOLDER.
	--------------------------------------------------------------------
	ONCE  COMPILED,  YOU DON'T NEED  TO  RECOMPILE	THE EXAMPLE IN ORDER
	TO RUN IT AGAIN,  UNLESS YOU WANT TO MAKE SOME CHANGES TO ITS SOURCE
	CODE. LINOLEUM EXECUTABLES ARE STAND-ALONE, IE. THEY CAN BE EXECUTED
	WITHOUT THE LINOLEUM COMPILER PACKAGE. THEY ARE, IN FACTS, LOW-LEVEL
	ASSEMBLY PROGRAMS. EVERYTHING THEY NEED IS INCLUDED IN "PROGRAM.EXE" )

      ( DESCRIPTION OF THIS PROGRAM:
	Presents a simple solution to the problem affecting
	the previous example, explaining how the solution works. )

( SOURCE CODE BEGINS HERE -------------------------------------------------- )

"directors"

	program name = { Move_it! };
	unit = 32;

"constants"

	(constant used in trigonometrics)

	       PI	     = 3.14159265358979323846f;
	TwoPI	= PI plus PI;

	LIGHT BLUE = 80A0FFh;

"variables"

	Spiral Center X = 0;
	Spiral Center Y = 0;
	Spiral Growth K = 1f;
	Spiral Entry Angle = 0f;
	Spiral Exit Angle = 1f;
	Spiral Entry Radius = 10f;
	Spiral Color = FFFFFFh;
	Spiral Growth K Step = 0f;
	Current Spiral Radius = 0f;
	Current Spiral Angle = 0f;
	Current Spiral Step = 0f;

	Animation Angle Delta = 0.1f;

	Milliseconds Per Frame = 1000 div 24;
	Counts at beginning of current frame = 0;

"workspace"

	Primary Display = 49152;

"programme"

	[Display Origin] = Primary Display;

	[Spiral Center X] ,= [Display Width]; [Spiral Center X] // 2f;
	[Spiral Center Y] ,= [Display Height]; [Spiral Center Y] // 2f;
	[Spiral Growth K] = 0.85f;
	[Spiral Entry Angle] = 0f;
	[Spiral Exit Angle] = 30f;
	[Spiral Entry Radius] = 5f;
	[Spiral Color] = LIGHT BLUE;

    "Move it"
	=> Start Synchronization;

		=> Clear the display;
		=> Spiral;

		[Display Command] = RETRACE;
		isocall;

		[Spiral Entry Angle] ++ [Animation Angle Delta];
		[Spiral Exit Angle] ++ [Animation Angle Delta];

	=> End Synchronization;

	[Console Command] = GET CONSOLE INPUT;
	isocall; ? failed -> Move it;

	end;			(of MAIN PROGRAM)

"Plot"
    ( Draws a single dot. Coordinates are checked. Reg B destroyed. )
    ( A = X coordinate; B = Y coordinate; C = DOT color. )
	? A '>= [Display Width] -> Plot Out of the screen;
	? B '>= [Display Height] -> Plot Out of the screen;
	B * [Display Width]; B + A;
	B + [Display Origin];
	[B] = C;
	end;
    "Plot Out of the screen"
	fail;

"Spiral"
    ( Draws a spiral, using the Plot subroutine. A, B, C destroyed. )
    ( Spiral Center X = center X coordinate, of integer type;
      Spiral Center Y = center Y coordinate, of integer type;
      Spiral Growth K = spiral's growth ratio, determines how much the
	distance from the center grows for each time
	the tracing point turns a full circle around
	spiral's center;
      Spiral Entry Angle = the angle at which the tracing point begins
	spinning, which determines the rotation of the whole figure;
      Spiral Exit Angle = the angle at which the tracing point stops
	spinning, determining where the spiral is no longer traced,
	that is, the end of the figure.
      Spiral Entry Radius = the initial radius of the tracing point's
	curse around the center.
      Spiral Color = the color of the dots forming the figure. )
	[Spiral Growth K Step] = [Spiral Growth K];
	[Spiral Growth K Step] // TwoPI;
	[Current Spiral Angle] = [Spiral Entry Angle];
	[Current Spiral Radius] = [Spiral Entry Radius];
	C = [Spiral Color];
    "Spiral tracement loop"
	A = [Current Spiral Angle]; ~~A;
	B = [Current Spiral Angle]; ~B;
	A ** [Current Spiral Radius]; A ++ [Spiral Center X];
	B ** [Current Spiral Radius]; B ++ [Spiral Center Y];
	A =, A;
	B =, B;
	=> Plot;
	[Current Spiral Step] = 0.999f;
	[Current Spiral Step] // [Current Spiral Radius];
	[Current Spiral Angle] ++ [Current Spiral Step];
	[Current Spiral Radius] ++ [Spiral Growth K Step];
	?? [Current Spiral Angle] < [Spiral Exit Angle]
		-> Spiral tracement loop;
	end;

"Clear the display"
	A = [Display Width];
	A * [Display Height];
	B = [Display Origin];
    "Loop to clear all of it"
	[B] = 0; B+;
	A ^ Loop to clear all of it;
	end;

"Start Synchronization"
	[Timer Command] = READ COUNTS;
	isocall;
	[Counts at beginning of current frame] = [Counts];
	end;

"End Synchronization"
	[Timer Command] = READ COUNTS;
	isocall;
	A = [Counts];
	A - [Counts at beginning of current frame];
	A / [Counts Per Millisecond];
	? A < [Milliseconds Per Frame] -> End Synchronization;
	end;

( SOURCE CODE ENDS HERE ---------------------------------------------------- )

( The way frames are synchronized to be shown at a constant speed, regardless
of the computer's speed, is given by the use of the "high performance timer":
this timer, which replaced the [Ticks Count] variable and "usertick" director
since Linoleum version 1.11 beta, is extremely reliable for small periods of
time, and it's perfect for this duty. The high performance timer is actually
hard-wired to an internal CPU counter, which always runs at constant speed;
to read the actual value of the timer, an isocall must be issued in this way:

	[Timer Command] = READ COUNTS;
	isocall;

the timer's current value will be returned in variable [Counts].
The step at which the timer is running is given by another variable, set up
by the run-time module before the application is launched, which is called
[Counts Per Millisecond]. The value of [Counts Per Millisecond] varies
depending on the CPU speed - the faster the CPU, the higher the value.
Usually, a single "step" of the high performance timer lasts well below
1 microsecond: 1 millionth of a second. To synchronize the animation, at
least two reads are performed: one at the beginning of the frame, and the
other AFTER the frame has been traced, so that, with a simple subtraction,
we can find out how many steps it took to the system to trace the frame.
At that point, we will use the value of [Counts Per Millisecond] to find
out how many milliseconds it took to the system to trace the frame:

"End Synchronization"
	[Timer Command] = READ COUNTS;
	isocall;
	A = [Counts];
	A - [Counts at beginning of current frame];
	A / [Counts Per Millisecond];

in the example, the result is given to register A.
At that point, A is compared with the time, espressed in milliseconds,
we want each frame to last: so, because of the following lines...

	? A < [Milliseconds Per Frame] -> End Synchronization;
	end;

where [Milliseconds Per Frame] is a program-specific variable [in this
example it's assigned to the number of milliseconds in a 24th of second],
when the period given by register A is BELOW the desired period, the
program enters a void loop which continuously reads the timer, in order
to wait enough milliseconds. When, instead, the computer is too slow to
draw each frame in due time, the loop does never repeat, and the animation
runs at the maximum possible speed. )
