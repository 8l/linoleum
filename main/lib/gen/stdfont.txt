(

    ASCII STANDARD L.in.oleum BITMAPPED FONT SUPPORT, INCLUDING "WIRECUT" FONT
    Written as part of the default L.in.oleum libaries, by Alessandro Ghignola
    --------------------------------------------------------------------------
    | Weighs:	       8020 bytes *
    | Allocates:	 80 bytes **
    --------------------------------------------------------------------------
    | *  code size + initialized data size + stockfile parts size
    | ** uninitialized data size [RAM needed, symbols in workspace period]
    --------------------------------------------------------------------------
      This library is free software;  you can redistribute it and/or modify it
    under the terms of the  GNU Lesser General Public License  as published by
    the  Free Software Foundation;  either version 2.1	of the License, or, at
    your option, any later version.
      This  library  is  distributed  in the hope  that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
    or FITNESS FOR A PARTICULAR PURPOSE.
      See the GNU Lesser General Public License for more details.
      You should have received a copy of the GNU Lesser General Public License
    along with this library;  if not,  write to the  Free Software Foundation,
    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
    --------------------------------------------------------------------------
      Given this package's libraries conventions, functions are not assumed to
    care for preserving registers' contents, but they might preserve any entry
    parameters passed throught related variables.  This library is provided as
    part of the L.in.oleum compiler package's default libraries.

    --------------------------------------------------------------------------
    DESCRIPTION
    --------------------------------------------------------------------------
      stdfont.txt is the library that gives an ASCII standard bitmapped font,
    and the function "stdwrite" which is used by other default libraries, and
    especially by the iGUI, to write text. "stdwrite" is rather fast, and the
    bitmapped fonts, although limited to a maximum of 16 pixels in width, take
    little space in the application's binary. Specifically, the default takes:
	n = h * 94 = 1504 units = 6016 bytes = 5.87 Kb.
    ...contrarily to an alternative default library, "TGAfont.txt", which does
    manage proportional truecolor fonts, such as the "cotton.tga" font used by
    the Pitagora Scenery Editor, but those take more space, because TGA files
    mapping the font have to be included in the application's stockfile, even
    though they may be compressed [see Lizzie] to save space, but they're not
    likely to take less than a bitmapped font anyway. That same "cotton.tga",
    compressed by Lizzie with a chunk size of 1536, still takes about 10 Kb.
      More fonts similar to the default, called "Wirecut" and designed to look
    rather easily readable, may be created in the same format, and included as
    your own libraries. A facility for doing that is the "emptyfont.txt" file
    found in the "main" folder. It is a model for how a bitmapped font library
    might look, ready to be filled with characters' shapes by replacing binary
    zeroes with ones, only note that to make a pixel properly, you must write
    two consecutive ones. This wastes half the range, otherwise meaning widths
    of upto 32 pixels, but might make it easier to "edit" the binary shapes in
    most text editors, where characters tend to be much taller than wider, and
    so the shapes created by 0's and 1's don't appear excessively stretched.
      Yet, if you don't like this organization, well... you have this library,
    to take and change and tweak the way you like. Or just write a new one...

	"stdwrite" actual features:		     Remarks:
	------------------------------------------------------------------
      - basic functionalities, word wrap	     [all versions]
      - latest form dimensions report		     [1.1b and later]
      - tabulations				     [buggy until 1.13.5b]
	------------------------------------------------------------------

    --------------------------------------------------------------------------
    USAGE
    --------------------------------------------------------------------------

      Synopsis for STD Write:

	[String] = pointer to text string to write;
	[Ink] = color of characters pixels while background is transparent;
	[Text X] = X coordinate of upper left corner ot first character;
	[Text Y] = Y coordinate of upper left corner ot first character;
	[Text Effect] = routine to trace a pixel and typically from pixelfx;
	[Text Display Width] = width in pixels of the layer to write upon;
	[Text Display Height] = height in pixels of the layer to write upon;
	[Text Display Origin] = pointer to the layer to write upon;
	[Text Region] = region to bound texts or NULL for no bounds check;
	[Text Window] = window to wrap texts to or NULL for whole layer;
	[Text Word Wrap] = ON or OFF to control automatic wordwrap;
	[Text Ghost Mode] = ON or OFF and if ON means text will not be traced;
	=> STD Write;
	[width of the string in pixels] = [Width Of Latest Form];
	[height of the string in pixels] = [Height Of Latest Form];

      Tuning parameters:

	[Text Intercharspacing] = void pixels to leave between characters;
	[Text Interlinespacing] = void pixels to leave between text lines;

      These may be changed before calling STD Write. They also influence the
    iGUI library's question boxes and pull-down menus, so you may decide to
    change them only temporarily while needing to trace text for some special
    purpose of yours, and then restore them to their previous values. Or, you
    can change them to further customize the look of the iGUI.

      Font parameters:

	[STD Font Alignment] = number of shapes declared on the same line;
	[STD Font Width] = width of characters in pixels;
	[STD Font Body] = height of characters in pixels;
	[STD Font Shape] = pointer to the vector declared as the font shape;
	[Text TAB Size] = tabulations alignment in pixels;

      These could be changed to use libraries with alternative fonts, which
    may descend from the model "emptyfont.txt". The alignment depends on how
    many characters' shapes you decide to write on the same line in one of
    those libraries. Here, I keep 4 characters per line, but it's a question
    of mere comfort, and ought to depend on how wide are your font's shapes.
    And by the way, of course we're speaking only of monospace fonts here, not
    proportional. They behave the same as tuning parameters, and equally, they
    influence the font used by the iGUI to write in its elements. The TAB size
    might be set, assuming the fixed-width, or monospace, nature of the font,
    to 8 times the width of a character; at least, this is most common value.

)

"libraries"

	pixelfx;

"variables"

	String			= NULL;
	Ink			= FFFFFFh;
	Text X			= 0;
	Text Y			= 0;
	Text Effect		= service FX Raw;
	Text Display Width	= 256;
	Text Display Height	= 192;
	Text Display Origin	= NULL;
	Text Region		= NULL;
	Text Window		= NULL;
	Text Word Wrap		= ON;
	Text Ghost Mode 	= OFF;

	Text TAB Size		= 64;
	Text Intercharspacing	= ZERO;
	Text Interlinespacing	= ZERO;

	Text Highlight Start	= NULL;
	Text Highlight Stop	= NULL;

	STD Font Alignment	= 4;
	STD Font Body		= 16;
	STD Font Width		= 8;
	STD Font Shape		= vector STD Default Font Shape;

 vector STD Default Font Shape
 = 0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000001100000000b;0000110000110000b;0000110000110000b;
   0000000000000000b;0000001100000000b;0000110000110000b;0000110000110000b;
   0000000000000000b;0000001100000000b;0000110000110000b;0000110000110000b;
   0000000000000000b;0000001100000000b;0000000000000000b;0011111111111100b;
   0000000000000000b;0000001100000000b;0000000000000000b;0000110000110000b;
   0000000000000000b;0000001100000000b;0000000000000000b;0000110000110000b;
   0000000000000000b;0000001100000000b;0000000000000000b;0000110000110000b;
   0000000000000000b;0000001100000000b;0000000000000000b;0011111111111100b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000110000110000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000110000110000b;
   0000000000000000b;0000001100000000b;0000000000000000b;0000110000110000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   (unsupp/001-020h) (21h-exclamation) (22h-doublequot.) (23h-hash/number)

   0000001100000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0011111111110000b;0011000000000000b;0000111111000000b;0000000011000000b;
   1100001100000000b;0011000000000000b;0011000000110000b;0000000011000000b;
   1100001100000000b;0000000000001100b;0011000000110000b;0000000011000000b;
   1100001100000000b;0000000000110000b;0011000000110000b;0000001100000000b;
   1100001100000000b;0000000011000000b;0011000011000000b;0000000000000000b;
   0011111111110000b;0000001100000000b;0000111100000000b;0000000000000000b;
   0000001100001100b;0000110000000000b;0011000011000011b;0000000000000000b;
   0000001100001100b;0011000000000000b;1100000000110011b;0000000000000000b;
   0000001100001100b;1100000000000000b;1100000000111100b;0000000000000000b;
   0000001100001100b;0000000000110000b;1100000000110000b;0000000000000000b;
   0011111111110000b;0000000000110000b;0011111111001111b;0000000000000000b;
   0000001100000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   (24h-dollar sign) (25h-percent sgn) (26h-ampersand)	 (27h-singlequote)

   0000000011000000b;0011000000000000b;0000000000000000b;0000000000000000b;
   0000001100000000b;0000110000000000b;0000001100000000b;0000000000000000b;
   0000110000000000b;0000001100000000b;0000001100000000b;0000000000000000b;
   0000110000000000b;0000001100000000b;0000001100000000b;0000000000000000b;
   0011000000000000b;0000000011000000b;1100001100001100b;0000001100000000b;
   0011000000000000b;0000000011000000b;0011111111110000b;0000001100000000b;
   0011000000000000b;0000000011000000b;0000111111000000b;0011111111110000b;
   0011000000000000b;0000000011000000b;0000110011000000b;0000001100000000b;
   0011000000000000b;0000000011000000b;0011000000110000b;0000001100000000b;
   0000110000000000b;0000001100000000b;1100000000001100b;0000000000000000b;
   0000110000000000b;0000001100000000b;0000000000000000b;0000000000000000b;
   0000001100000000b;0000110000000000b;0000000000000000b;0000000000000000b;
   0000000011000000b;0011000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   (28h-open par.)   (29h-closed par.) (2Ah-asterisk)	 (2Bh-plus)

   0000000000000000b;0000000000000000b;0000000000000000b;000000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;000000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;000000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;000000000000001100b;
   0000000000000000b;0000000000000000b;0000000000000000b;000000000000110000b;
   0000000000000000b;0000000000000000b;0000000000000000b;000000000011000000b;
   0000000000000000b;0011111111110000b;0000000000000000b;000000001100000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;000000110000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;000011000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;001100000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;110000000000000000b;
   0000001100000000b;0000000000000000b;0000001100000000b;000000000000000000b;
   0000001100000000b;0000000000000000b;0000000000000000b;000000000000000000b;
   0000110000000000b;0000000000000000b;0000000000000000b;000000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;000000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;000000000000000000b;
   (2Ch-comma)	     (2Dh-dash, minus) (2Eh-dot, period) (2Fh-fwd. slash)

   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0011111111110000b;0000001100000000b;0011111111110000b;0011111111110000b;
   1100000000001100b;0000001100000000b;1100000000001100b;1100000000001100b;
   1100000000001100b;0000111100000000b;1100000000001100b;1100000000001100b;
   1100000000001100b;0000001100000000b;0000000000001100b;0000000000001100b;
   1100001100001100b;0000001100000000b;0000000000110000b;0000000000001100b;
   1100001100001100b;0000001100000000b;0000000011000000b;0000001111110000b;
   1100001100001100b;0000001100000000b;0000001100000000b;0000000000001100b;
   1100000000001100b;0000001100000000b;0000110000000000b;0000000000001100b;
   1100000000001100b;0000001100000000b;0011000000000000b;1100000000001100b;
   1100000000001100b;0000001100000000b;1100000000000000b;1100000000001100b;
   0011111111110000b;0000111111000000b;1111111111111100b;0011111111110000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   (30h-zero,cypher) (31h-one)	       (32h-two)	 (33h-three)

   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000110000b;1111111111111100b;0000111111110000b;1111111111111100b;
   0000000011110000b;1100000000000000b;0011000000000000b;0000000000001100b;
   0000001100110000b;1100000000000000b;1100000000000000b;0000000000001100b;
   0000110000110000b;1100000000000000b;1100000000000000b;0000000000110000b;
   0011000000110000b;1111111111110000b;1100111111000000b;0000000000110000b;
   1100000000110000b;0000000000001100b;1111000000110000b;0000000011000000b;
   1100000000110000b;0000000000001100b;1100000000001100b;0000000011000000b;
   1111111111111100b;0000000000001100b;1100000000001100b;0000001100000000b;
   0000000000110000b;1100000000001100b;1100000000001100b;0000001100000000b;
   0000000000110000b;1100000000001100b;0011000000110000b;0000110000000000b;
   0000000000110000b;0011111111110000b;0000111111000000b;0000110000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   (34h-four)	     (35h-five)        (36h-six)	 (37h-seven)

   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0011111111110000b;0000111111000000b;0000000000000000b;0000000000000000b;
   1100000000001100b;0011000000110000b;0000000000000000b;0000000000000000b;
   1100000000001100b;1100000000001100b;0000000000000000b;0000000000000000b;
   1100000000001100b;1100000000001100b;0000001100000000b;0000001100000000b;
   1100000000001100b;1100000000001100b;0000000000000000b;0000000000000000b;
   0011111111110000b;0011000000111100b;0000000000000000b;0000000000000000b;
   1100000000001100b;0000111111001100b;0000000000000000b;0000000000000000b;
   1100000000001100b;0000000000001100b;0000001100000000b;0000001100000000b;
   1100000000001100b;0000000000001100b;0000000000000000b;0000001100000000b;
   1100000000001100b;0000000000110000b;0000000000000000b;0000001100000000b;
   0011111111110000b;0011111111000000b;0000000000000000b;0000110000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   (38h-eight)	     (39h-nine)        (3Ah-colon)	 (3Bh-semicolon)

   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0011111111110000b;
   0000000000110000b;0000000000000000b;0011000000000000b;1100000000001100b;
   0000000011000000b;0000000000000000b;0000110000000000b;1100000000001100b;
   0000001100000000b;0011111111111100b;0000001100000000b;0000000000001100b;
   0000110000000000b;0000000000000000b;0000000011000000b;0000000000001100b;
   0011000000000000b;0000000000000000b;0000000000110000b;0000000011110000b;
   0000110000000000b;0000000000000000b;0000000011000000b;0000001100000000b;
   0000001100000000b;0011111111111100b;0000001100000000b;0000001100000000b;
   0000000011000000b;0000000000000000b;0000110000000000b;0000000000000000b;
   0000000000110000b;0000000000000000b;0011000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000001100000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   (3Ch-lessthan)    (3Dh-equal)       (3Eh-greaterthan) (3Fh-question)

   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000001100000000b;1111111111110000b;0011111111110000b;
   0000001111000000b;0000110011000000b;1100000000001100b;1100000000001100b;
   0011110000111100b;0011000000110000b;1100000000001100b;1100000000001100b;
   1100000000000011b;1100000000001100b;1100000000001100b;1100000000000000b;
   1100000000000011b;1100000000001100b;1100000000001100b;1100000000000000b;
   1100001111000011b;1111111111111100b;1100111111110000b;1100000000000000b;
   1100110000110011b;1100000000001100b;1100000000001100b;1100000000000000b;
   1100110000110011b;1100000000001100b;1100000000001100b;1100000000000000b;
   1100001111001111b;1100000000001100b;1100000000001100b;1100000000001100b;
   1100000000000000b;1100000000001100b;1100000000001100b;1100000000001100b;
   0011110000000000b;1100000000001100b;1111111111110000b;0011111111110000b;
   0000001111110000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   (40h-at)	     (41h-uppercase A) (42h-uppercase B) (43h-uppercase C)

   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   1111111111110000b;1111111111111100b;1111111111111100b;0011111111110000b;
   1100000000001100b;1100000000000000b;1100000000000000b;1100000000001100b;
   1100000000001100b;1100000000000000b;1100000000000000b;1100000000001100b;
   1100000000001100b;1100000000000000b;1100000000000000b;1100000000000000b;
   1100000000001100b;1100000000000000b;1100000000000000b;1100000000000000b;
   1100000000001100b;1111111111000000b;1111111111000000b;1100001111110000b;
   1100000000001100b;1100000000000000b;1100000000000000b;1100000000001100b;
   1100000000001100b;1100000000000000b;1100000000000000b;1100000000001100b;
   1100000000001100b;1100000000000000b;1100000000000000b;1100000000001100b;
   1100000000001100b;1100000000000000b;1100000000000000b;1100000000001100b;
   1111111111110000b;1111111111111100b;1100000000000000b;0011111111110000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   (44h-uppercase D) (45h-uppercase E) (46h-uppercase F) (47h-uppercase G)

   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   1100000000001100b;0000111111000000b;0000000000111100b;1100000000001100b;
   1100000000001100b;0000001100000000b;0000000000001100b;1100000000110000b;
   1100000000001100b;0000001100000000b;0000000000001100b;1100000011000000b;
   1100000000001100b;0000001100000000b;0000000000001100b;1100001100000000b;
   1100000000001100b;0000001100000000b;0000000000001100b;1100110000000000b;
   1111111111111100b;0000001100000000b;0000000000001100b;1111000000000000b;
   1100000000001100b;0000001100000000b;0000000000001100b;1100110000000000b;
   1100000000001100b;0000001100000000b;0000000000001100b;1100001100000000b;
   1100000000001100b;0000001100000000b;1100000000001100b;1100000011000000b;
   1100000000001100b;0000001100000000b;1100000000001100b;1100000000110000b;
   1100000000001100b;0000111111000000b;0011111111110000b;1100000000001100b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   (48h-uppercase H) (49h-uppercase I) (4Ah-uppercase J) (4Bh-uppercase K)

   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   1100000000000000b;1100000000001100b;1100000000001100b;0011111111110000b;
   1100000000000000b;1100000000001100b;1100000000001100b;1100000000001100b;
   1100000000000000b;1111000000111100b;1111000000001100b;1100000000001100b;
   1100000000000000b;1100110011001100b;1100110000001100b;1100000000001100b;
   1100000000000000b;1100001100001100b;1100001100001100b;1100000000001100b;
   1100000000000000b;1100000000001100b;1100000011001100b;1100000000001100b;
   1100000000000000b;1100000000001100b;1100000000111100b;1100000000001100b;
   1100000000000000b;1100000000001100b;1100000000001100b;1100000000001100b;
   1100000000000000b;1100000000001100b;1100000000001100b;1100000000001100b;
   1100000000000000b;1100000000001100b;1100000000001100b;1100000000001100b;
   1111111111111100b;1100000000001100b;1100000000001100b;0011111111110000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   (4Ch-uppercase L) (4Dh-uppercase M) (4Eh-uppercase N) (4Fh-uppercase O)

   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   1111111111110000b;0011111111110000b;1111111111110000b;0011111111110000b;
   1100000000001100b;1100000000001100b;1100000000001100b;1100000000001100b;
   1100000000001100b;1100000000001100b;1100000000001100b;1100000000001100b;
   1100000000001100b;1100000000001100b;1100000000001100b;1100000000000000b;
   1100000000001100b;1100000000001100b;1100000000001100b;1100000000000000b;
   1111111111110000b;1100000000001100b;1111111111110000b;0011111111110000b;
   1100000000000000b;1100000000001100b;1100110000000000b;0000000000001100b;
   1100000000000000b;1100000000001100b;1100001100000000b;0000000000001100b;
   1100000000000000b;1100000011001100b;1100000011000000b;1100000000001100b;
   1100000000000000b;1100000000110000b;1100000000110000b;1100000000001100b;
   1100000000000000b;0011111111001100b;1100000000001100b;0011111111110000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   (50h-uppercase P) (51h-uppercase Q) (52h-uppercase R) (53h-uppercase S)

   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   1111111111111100b;1100000000001100b;1100000000001100b;1100000000001100b;
   0000001100000000b;1100000000001100b;1100000000001100b;1100000000001100b;
   0000001100000000b;1100000000001100b;1100000000001100b;1100000000001100b;
   0000001100000000b;1100000000001100b;0011000000110000b;1100000000001100b;
   0000001100000000b;1100000000001100b;0011000000110000b;1100000000001100b;
   0000001100000000b;1100000000001100b;0011000000110000b;1100000000001100b;
   0000001100000000b;1100000000001100b;0000110011000000b;1100001100001100b;
   0000001100000000b;1100000000001100b;0000110011000000b;1100001100001100b;
   0000001100000000b;1100000000001100b;0000110011000000b;1100110011001100b;
   0000001100000000b;1100000000001100b;0000001100000000b;1111000000111100b;
   0000001100000000b;0011111111110000b;0000001100000000b;1100000000001100b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   (54h-uppercase T) (55h-uppercase U) (56h-uppercase V) (57h-uppercase W)

   0000000000000000b;0000000000000000b;0000000000000000b;0000111111110000b;
   1100000000001100b;1100000000001100b;1111111111111100b;0000110000000000b;
   1100000000001100b;1100000000001100b;0000000000001100b;0000110000000000b;
   1100000000001100b;1100000000001100b;0000000000001100b;0000110000000000b;
   0011000000110000b;1100000000001100b;0000000000110000b;0000110000000000b;
   0000110011000000b;0011000000110000b;0000000011000000b;0000110000000000b;
   0000001100000000b;0000110011000000b;0000001100000000b;0000110000000000b;
   0000110011000000b;0000001100000000b;0000110000000000b;0000110000000000b;
   0011000000110000b;0000001100000000b;0011000000000000b;0000110000000000b;
   1100000000001100b;0000001100000000b;1100000000000000b;0000110000000000b;
   1100000000001100b;0000001100000000b;1100000000000000b;0000110000000000b;
   1100000000001100b;0000001100000000b;1111111111111100b;0000110000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000111111110000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   (58h-uppercase X) (59h-uppercase Y) (5Ah-uppercase Z) (5Bh-openbracket)

   0000000000000000b;0000111111110000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000110000b;0000001100000000b;0000000000000000b;
   0000000000000000b;0000000000110000b;0000110011000000b;0000000000000000b;
   1100000000000000b;0000000000110000b;0011000000110000b;0000000000000000b;
   0011000000000000b;0000000000110000b;0000000000000000b;0000000000000000b;
   0000110000000000b;0000000000110000b;0000001100000000b;0000000000000000b;
   0000001100000000b;0000000000110000b;0000001100000000b;0000000000000000b;
   0000000011000000b;0000000000110000b;0000001100000000b;0000000000000000b;
   0000000000110000b;0000000000110000b;0000001100000000b;0000000000000000b;
   0000000000001100b;0000000000110000b;0000001100000000b;0000000000000000b;
   0000000000000000b;0000000000110000b;0000001100000000b;0000000000000000b;
   0000000000000000b;0000000000110000b;0000001100000000b;0000000000000000b;
   0000000000000000b;0000111111110000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;1111111111111111b;
   (5Ch-backslash)   (5Dh-closedbrkt.) (5Eh-powerraise)  (5Fh-underscore)

   0000000000000000b;0000000000000000b;0011000000000000b;0000000000000000b;
   0000001100000000b;0000000000000000b;0011000000000000b;0000000000000000b;
   0000001100000000b;0000000000000000b;0011000000000000b;0000000000000000b;
   0000001100000000b;0000000000000000b;0011000000000000b;0000000000000000b;
   0000000011000000b;0000111111110000b;0011111111110000b;0000111111100000b;
   0000000000000000b;0011000000001100b;0011000000001100b;0011000000011000b;
   0000000000000000b;0000000000001100b;0011000000001100b;0011000000000000b;
   0000000000000000b;0000111111111100b;0011000000001100b;0011000000000000b;
   0000000000000000b;0011000000001100b;0011000000001100b;0011000000000000b;
   0000000000000000b;0011000000001100b;0011000000001100b;0011000000000000b;
   0000000000000000b;0011000000001100b;0011000000001100b;0011000000011000b;
   0000000000000000b;0000111111111100b;0011111111110000b;0000111111100000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   (60h-backquote)   (61h-lowercase a) (62h-lowercase b) (63h-lowercase c)

   0000000000001100b;0000000000000000b;0000000011111100b;0000000000000000b;
   0000000000001100b;0000000000000000b;0000001100000000b;0000000000000000b;
   0000000000001100b;0000000000000000b;0000001100000000b;0000000000000000b;
   0000000000001100b;0000000000000000b;0000001100000000b;0000000000000000b;
   0000111111111100b;0000111111110000b;0011111111110000b;0000111111111100b;
   0011000000001100b;0011000000001100b;0000001100000000b;0011000000001100b;
   0011000000001100b;0011000000001100b;0000001100000000b;0011000000001100b;
   0011000000001100b;0011001111111100b;0000001100000000b;0011000000001100b;
   0011000000001100b;0011000000000000b;0000001100000000b;0011000000001100b;
   0011000000001100b;0011000000000000b;0000001100000000b;0011000000001100b;
   0011000000001100b;0011000000000000b;0000001100000000b;0011000000001100b;
   0000111111111100b;0000111111110000b;0000001100000000b;0000111111111100b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000001100b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000001100b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000001100b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000111111110000b;
   (64h-lowercase d) (65h-lowercase e) (66h-lowercase f) (67h-lowercase g)

   0011000000000000b;0000000000000000b;0000000000000000b;0011000000000000b;
   0011000000000000b;0000001100000000b;0000000000001100b;0011000000000000b;
   0011000000000000b;0000000000000000b;0000000000000000b;0011000000000000b;
   0011000000000000b;0000000000000000b;0000000000000000b;0011000000110000b;
   0011111111110000b;0000111100000000b;0000000000111100b;0011000011000000b;
   0011000000001100b;0000001100000000b;0000000000001100b;0011001100000000b;
   0011000000001100b;0000001100000000b;0000000000001100b;0011110000000000b;
   0011000000001100b;0000001100000000b;0000000000001100b;0011001100000000b;
   0011000000001100b;0000001100000000b;0000000000001100b;0011000011000000b;
   0011000000001100b;0000001100000000b;0011000000001100b;0011000000110000b;
   0011000000001100b;0000001100000000b;0011000000001100b;0011000000001100b;
   0011000000001100b;0000111111000000b;0000111111110000b;0011000000001100b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   (68h-lowercase h) (69h-lowercase i) (6Ah-lowercase j) (6Bh-lowercase k)

   0000001100000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000001100000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000001100000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000001100000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000001100000000b;0011110011110000b;0011111111110000b;0000111111110000b;
   0000001100000000b;1100001100001100b;0011000000001100b;0011000000001100b;
   0000001100000000b;1100001100001100b;0011000000001100b;0011000000001100b;
   0000001100000000b;1100000000001100b;0011000000001100b;0011000000001100b;
   0000001100000000b;1100000000001100b;0011000000001100b;0011000000001100b;
   0000001100000000b;1100000000001100b;0011000000001100b;0011000000001100b;
   0000001100000000b;1100000000001100b;0011000000001100b;0011000000001100b;
   0000000011000000b;1100000000001100b;0011000000001100b;0000111111110000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   (6Ch-lowercase l) (6Dh-lowercase m) (6Eh-lowercase n)     (6Fh-lowercase o)

   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0011111111110000b;0000111111111100b;0011111111110000b;0000111111110000b;
   0011000000001100b;0011000000001100b;0011000000001100b;0011000000001100b;
   0011000000001100b;0011000000001100b;0011000000000000b;0011000000000000b;
   0011000000001100b;0011000000001100b;0011000000000000b;0000111111110000b;
   0011000000001100b;0011000000001100b;0011000000000000b;0000000000001100b;
   0011000000001100b;0011000000001100b;0011000000000000b;0000000000001100b;
   0011000000001100b;0011000000001100b;0011000000000000b;0011000000001100b;
   0011111111110000b;0000111111111100b;0011000000000000b;0000111111110000b;
   0011000000000000b;0000000000001100b;0000000000000000b;0000000000000000b;
   0011000000000000b;0000000000001100b;0000000000000000b;0000000000000000b;
   0011000000000000b;0000000000001100b;0000000000000000b;0000000000000000b;
   0011000000000000b;0000000000001100b;0000000000000000b;0000000000000000b;
   (70h-lowercase p) (71h-lowercase q) (72h-lowercase r) (73h-lowercase s)

   0000001100000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000001100000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000001100000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000001100000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0011111111110000b;0011000000001100b;1100000000001100b;1100000000001100b;
   0000001100000000b;0011000000001100b;1100000000001100b;1100000000001100b;
   0000001100000000b;0011000000001100b;1100000000001100b;1100000000001100b;
   0000001100000000b;0011000000001100b;1100000000001100b;1100000000001100b;
   0000001100000000b;0011000000001100b;1100000000001100b;1100001100001100b;
   0000001100000000b;0011000000001100b;0011000000110000b;1100001100001100b;
   0000001100000000b;0011000000001100b;0000110011000000b;1100001100001100b;
   0000000011110000b;0000111111111100b;0000001100000000b;0011110011110000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   (74h-lowercase t) (75h-lowercase u) (76h-lowercase v) (77h-lowercase w)

   0000000000000000b;0000000000000000b;0000000000000000b;0000000011110000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000001100000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000001100000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000001100000000b;
   1100000000000011b;0011000000001100b;1111111111111111b;0000001100000000b;
   0011000000001100b;0011000000001100b;0000000000001100b;0000001100000000b;
   0000110000110000b;0011000000001100b;0000000000110000b;0000110000000000b;
   0000001100000000b;0011000000001100b;0000000011000000b;0011000000000000b;
   0000000011000000b;0011000000001100b;0000001100000000b;0000110000000000b;
   0000110000110000b;0011000000001100b;0000110000000000b;0000001100000000b;
   0011000000001100b;0011000000001100b;0011000000000000b;0000001100000000b;
   1100000000000011b;0000111111111100b;1111111111111111b;0000001100000000b;
   0000000000000000b;0000000000001100b;0000000000000000b;0000001100000000b;
   0000000000000000b;0000000000001100b;0000000000000000b;0000001100000000b;
   0000000000000000b;0000000000001100b;0000000000000000b;0000000011110000b;
   0000000000000000b;0000111111110000b;0000000000000000b;0000000000000000b;
   (78h-lowercase x) (79h-lowercase y) (7Ah-lowercase z) (7Bh-openbrace)

   0000001100000000b;0011110000000000b;0000000000000000b;0000000000000000b;
   0000001100000000b;0000001100000000b;0000000000000000b;0000000000000000b;
   0000001100000000b;0000001100000000b;0000000000000000b;0000000000000000b;
   0000001100000000b;0000001100000000b;0000000000000000b;0000000000000000b;
   0000001100000000b;0000001100000000b;0011110000000000b;0000000000000000b;
   0000001100000000b;0000001100000000b;1100001100001100b;0000001111000000b;
   0000001100000000b;0000000011000000b;1100001100001100b;0000001111000000b;
   0000001100000000b;0000000000110000b;1100001100001100b;0000001111000000b;
   0000001100000000b;0000000011000000b;0000000011110000b;0000000000000000b;
   0000001100000000b;0000001100000000b;0000000000000000b;0000000000000000b;
   0000001100000000b;0000001100000000b;0000000000000000b;0000000000000000b;
   0000001100000000b;0000001100000000b;0000000000000000b;0000000000000000b;
   0000001100000000b;0000001100000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000001100000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0011110000000000b;0000000000000000b;0000000000000000b;
   0000000000000000b;0000000000000000b;0000000000000000b;0000000000000000b;
   (7Ch-verticalbar) (7Dh-closedbrace) (7Eh-asciitilde)  (7Fh-datacarrier)

"workspace"

	Width Of Latest Form				= 1;
	Height Of Latest Form				= 1;

	STD HL						= 1;
	STD Current character X 			= 1;
	STD Current character Y 			= 1;
	STD Offset to current character in string	= 1;
	STD Dot X					= 1;
	STD Dot Y					= 1;
	STD Stop X					= 1;
	STD Stop Y					= 1;
	STD Current shape unit				= 1;
	STD Dot Mask					= 1;
	STD Window Left 				= 1;
	STD Window Top					= 1;
	STD Window Right				= 1;
	STD Window Bottom				= 1;
	STD Prescent X					= 1;
	STD Prescent offset				= 1;
	STD Width Correction				= 1;
	STD Height Correction				= 1;

"programme"

"STD Write"
	[Width Of Latest Form] = ZERO;
	[Height Of Latest Form] = ZERO;
	? [String] = 0 -> STD Failure writing text;
	? [Text Display Origin] = 0 -> STD Failure writing text;
	? [Text Display Width] <= 0 -> STD Failure writing text;
	? [Text Display Height] <= 0-> STD Failure writing text;
	[STD Width Correction] = [Text X]; ? [STD Width Correction] >= 0 -> STDWCok; [STD Width Correction] = 0; "STDWCok"
	[STD Height Correction] = [Text Y]; ? [STD Height Correction] >= 0 -> STDHCok; [STD Height Correction] = 0; "STDHCok"
	[STD Current character X] = [Text X];
	[STD Current character Y] = [Text Y];
	[STD Window Left] = ZERO;
	[STD Window Top] = ZERO;
	[STD Window Right] = GREATEST SIGNED INTEGER;
	[STD Window Bottom] = GREATEST SIGNED INTEGER;
	? [Text Window] = NULL -> STD No window selected;
	A = [Text Window];
	[STD Window Left] = [A plus 0];
	[STD Window Top] = [A plus 1];
	[STD Window Right] = [A plus 2];
	[STD Window Bottom] = [A plus 3];
	[STD Current character X] + [STD Window Left];
	[STD Current character Y] + [STD Window Top];
    "STD No window selected"
	[STD Offset to current character in string] = 0;
    "STD Loop for characters in string"
	A = [STD Offset to current character in string];
	A + [String];
	[STD HL] = NO;
      ? A < [Text Highlight Start] -> STD Not to be highlighted;
      ? A >= [Text Highlight Stop] -> STD Not to be highlighted;
	[STD HL] = YES;
    "STD Not to be highlighted"
	A = [A];
	? A = 000 -> STD End of text string; (found null terminator)
	? A = 009 -> STD TAB; (a forward tabulation)
	? A = 010 -> STD LF; (LF, Line Feed, same as pressing "enter")
	? A = 013 -> STD Next character; (LF would do CR+LF for UNIX compatibility)
	? A = 032 -> STD BLANK; (simple blank space, also delimiter for wordwraps)
	? A < 032 -> STD Character placeholder; (unsupported layout-formating code)
	? A - 80h -> STD No data carrier; (bit 7 means base128-encoded data byte)
	A = 127; (placeholder for raw byte, whenever data carrier bit is detected)
    "STD No data carrier"
	B = [STD Window Right]; B - [STD Font Width]; B - [Text Intercharspacing];
	? [STD Current character X] <= B -> STD Same character;
	? [Text Word Wrap] = OFF -> STD Next character;
	[STD Current character X] = [STD Window Left];
	[STD Current character Y] + [STD Font Body];
	[STD Current character Y] + [Text Interlinespacing];
	? [STD Current character Y] >= [STD Window Bottom] -> STD End of text string;
    "STD Same character"
	B = [STD Window Top]; B - [STD Font Body]; B - [Text Interlinespacing];
	? [STD Current character Y] < B -> STD Next character;
	B = [STD Current character X]; B + [STD Font Width]; B + [Text Intercharspacing];
	B - [STD Window Left]; B - [STD Width Correction];
	? B <= [Width Of Latest Form] -> STD WLF Not updating;
	[Width Of Latest Form] = B;
    "STD WLF Not updating"
	? [Text Ghost Mode] = ON -> STD Ghost mode;
	B = A; B - 32; B / [STD Font Alignment];
	C = A; C - 32; C % [STD Font Alignment];
	[STD Current shape unit] = B;
	[STD Current shape unit] * [STD Font Alignment];
	[STD Current shape unit] * [STD Font Body];
	[STD Current shape unit] + C;
	[STD Current shape unit] + [STD Font Shape];
	[STD Dot Y] = [STD Current character Y];
	[STD Stop Y] = [STD Current character Y];
	[STD Stop Y] + [STD Font Body];
    "STD Loop for scan lines in char shape"
	[STD Dot X] = [STD Current character X];
	[STD Stop X] = [STD Current character X];
	[STD Stop X] + [STD Font Width];
	[STD Dot Mask] = 80000000h;
	[STD Dot Mask] <@ [STD Font Width];
	[STD Dot Mask] <@ [STD Font Width];
    "STD Loop for pixels in char shape"
	D = [STD Current shape unit];
	? [D] - [STD Dot Mask] -> STD No dot in shape at this point;
	A = [STD Dot X]; ? A '>= [Text Display Width] -> STD No dot in shape at this point;
	B = [STD Dot Y]; ? B '>= [Text Display Height] -> STD No dot in shape at this point;
	? [Text Region] = NULL -> STD Dot anyway;
	D = [Text Region];
	? A < [D plus 0] -> STD No dot in shape at this point;
	? B < [D plus 1] -> STD No dot in shape at this point;
	? A > [D plus 2] -> STD No dot in shape at this point;
	? B > [D plus 3] -> STD No dot in shape at this point;
    "STD Dot anyway"
	B * [Text Display Width];
	A + B;
	B = [Ink];
	A + [Text Display Origin];
	=> [Text Effect];
    "STD No dot in shape at this point"
	? [STD HL] = NO -> STD Not being highlighted;
	A = [STD Dot X]; ? A '>= [Text Display Width] -> STD Not being highlighted;
	B = [STD Dot Y]; ? B '>= [Text Display Height] -> STD Not being highlighted;
	? [Text Region] = NULL -> STD Highlight anyway;
	D = [Text Region];
	? A < [D plus 0] -> STD Not being highlighted;
	? B < [D plus 1] -> STD Not being highlighted;
	? A > [D plus 2] -> STD Not being highlighted;
	? B > [D plus 3] -> STD Not being highlighted;
    "STD Highlight anyway"
	B * [Text Display Width];
	A + B;
	A + [Text Display Origin];
	=> service FX Negate;
    "STD Not being highlighted"
	[STD Dot Mask] @> 2;
	[STD Dot X]+;
	? [STD Dot X] < [STD Stop X] -> STD Loop for pixels in char shape;
	[STD Current shape unit] + [STD Font Alignment];
	[STD Dot Y]+;
	? [STD Dot Y] < [STD Stop Y] -> STD Loop for scan lines in char shape;
    "STD Ghost mode"
	[STD Current character X] + [STD Font Width];
	[STD Current character X] + [Text Intercharspacing];
    "STD Next character"
	[STD Offset to current character in string]+;
	-> STD Loop for characters in string;
    "STD End of text string"
	[Height Of Latest Form] = [STD Current character Y];
	[Height Of Latest Form] + [STD Font Body];
	[Height Of Latest Form] - [STD Window Top];
	[Height Of Latest Form] - [STD Height Correction];
	end;
    "STD Failure writing text"
	fail;

    "STD TAB"
	? [Text TAB Size] <= 0 -> STD Next character;
	B = [STD Current character X];
	C = B;
	B % [Text TAB Size];
	C - B;
	C + [Text TAB Size];
	[STD Current character X] = C;
	=> STD Check wrapping words;
	-> STD Next character;

    "STD LF"
	[STD Current character X] = [STD Window Left];
	[STD Current character Y] + [STD Font Body];
	[STD Current character Y] + [Text Interlinespacing];
	? [STD Current character Y] >= [STD Window Bottom] -> STD End of text string;
	-> STD Next character;

    "STD BLANK"
	[STD Current character X] + [STD Font Width];
	[STD Current character X] + [Text Intercharspacing];
	=> STD Check wrapping words;
	B = [STD Current character X]; B - [STD Window Left]; B - [STD Width Correction];
	? B <= [Width Of Latest Form] -> STD Next character;
	[Width Of Latest Form] = B;
	-> STD Next character;

    "STD Character placeholder"
	A = 32;
	-> STD No data carrier;

    "STD Check wrapping words"
	? [Text Word Wrap] != ON -> STD End word wrap;
	[STD Prescent X] = [STD Current character X];
	[STD Prescent offset] = [STD Offset to current character in string];
	    "STD WW Loop"
		[STD Prescent offset]+;
		A = [STD Prescent offset]; A + [String]; A = [A];
		? A = 00 -> STD End word wrap;
		? A = 09 -> STD End word wrap;
		? A = 13 -> STD End word wrap;
		? A = 32 -> STD End word wrap;
		[STD Prescent X] + [STD Font Width];
		[STD Prescent X] + [Text Intercharspacing];
	? [STD Prescent X] <= [STD Window Right] -> STD WW Loop;
	[STD Current character X] = [STD Window Left];
	[STD Current character Y] + [STD Font Body];
	[STD Current character Y] + [Text Interlinespacing];
	? [STD Current character Y] < [STD Window Bottom] -> STD End word wrap;
	$ + 1; -> STD End of text string;
    "STD End word wrap"
	end;
