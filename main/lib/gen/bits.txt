(

    BIT-STREAMS MANAGEMENT ROUTINES
    Written as part of the default L.in.oleum libaries, by Alessandro Ghignola
    --------------------------------------------------------------------------
    | Weighs:		316 bytes *
    | Allocates:	 16 bytes **
    --------------------------------------------------------------------------
    | *  code size + initialized data size + stockfile parts size
    | ** uninitialized data size [RAM needed, symbols in workspace period]
    --------------------------------------------------------------------------
      This library is free software;  you can redistribute it and/or modify it
    under the terms of the  GNU Lesser General Public License  as published by
    the  Free Software Foundation;  either version 2.1	of the License, or, at
    your option, any later version.
      This  library  is  distributed  in the hope  that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
    or FITNESS FOR A PARTICULAR PURPOSE.
      See the GNU Lesser General Public License for more details.
      You should have received a copy of the GNU Lesser General Public License
    along with this library;  if not,  write to the  Free Software Foundation,
    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
    --------------------------------------------------------------------------
      Given this package's libraries conventions, functions are not assumed to
    care for preserving registers' contents, but they might preserve any entry
    parameters passed throught related variables.  This library is provided as
    part of the L.in.oleum compiler package's default libraries.

    --------------------------------------------------------------------------
    DESCRIPTION
    --------------------------------------------------------------------------
      This library is very useful whenever you have to manage a data stream
    which isn't formed by whole memory units. Since only LINOLEUM data streams
    are always supposed to be made of whole units, this library's subroutines
    apply to any other cases.
      A very common use is to translate the contents of a file. For example, a
    standard text file is made up of 8 bits per character. However, to process
    the text in some way throught a LINOLEUM application, you have to make all
    characters fit into a memory unit, which is exactly the value returned by
    the Get Bit Field subroutine if you specify a [Bit Field Size] of 8 bits
    and set other parameters to locate the character you want to translate.

      Remember to RESPECT THE RANGES:
	values out of range would give unpredictable results,
	given that ranges are unchecked for better performance.

      Changed July 13th, 2003: multiscalar optimizations.
      Last changed December 9th, 2003: "leave" replaces "end".
      See also: bytes.txt

    --------------------------------------------------------------------------
    USAGE
    --------------------------------------------------------------------------
	Get Bit Field / Set Bit Field
	    [Bit Stream Pointer] - input
		The pointer to the whole bit-stream from where
		taking a single field. It points to the FIRST unit
		in the bit-stream.
	    [Starting Bit Number] - input
		The number of the first bit within the bit-stream,
		where the selected bit-field begins. This is the
		most significant bit of the bit-field.
		Range ZERO to UNIT-1. [0 to 31 in the present processors]
	    [Bit Field Size] - input
		The number of bits forming the selected bit-field.
		Range 0 to UNIT. [0 to 32 in the present processors]
	    [Bit Field Content] - input/output
		The value of selected bit-field.
		Output of Get Bit Field, input of Set Bit Field.
		If the size of the bit-field, in bits, was less than
		a memory unit, remaining bits to the left are zeroed
		during reads [Get], untouched during writes [Set].

)

"workspace"

(entry parameters for Get Bit Field)
	Bit Stream Pointer  = 1;
	Starting Bit Number = 1;
	Bit Field Size	    = 1;

(output parameters from Get Bit Field)
	Bit Field Content   = 1;

"programme"

"Get Bit Field"
	a = [Starting Bit Number];
	b = a;
	a > 5;
	b & 11111b;
	a + [Bit Stream Pointer];
	e = b;
	d = [a];
	e + [Bit Field Size];
	d > b;
      ? e <= 32 -> GBF No wraparound;
	c = 32;
	c - b;
	e = [a plus 1];
	e < c;
	d | e;
      "GBF No wraparound"
	a = 32;
	a - [Bit Field Size];
	d < a;
	d > a;
	[Bit Field Content] = d;
	leave;

"Set Bit Field"
	a = [Starting Bit Number];
	b = a;
	a > 5;
	b & 11111b;
	a + [Bit Stream Pointer];
	e = b;
	e + [Bit Field Size];
      ? e <= 32 -> SBF No wraparound;
	c = 32;
	d = 1;
	c - b;
	d @> c;
	e = [Bit Field Content];
	d -;
	[a] & d;
	e < b;
	[a] | e;
	e = [Bit Field Size];
	d = 1;
	e - c;
	d < e;
	e = [Bit Field Content];
	d -;
	! d;
	e > c;
	[a plus 1] & d;
	[a plus 1] | e;
	leave;
      "SBF No wraparound"
	c = 1;
	d = [Bit Field Content];
	c < [Bit Field Size];
	c -;
	d < b;
	c <@ b;
	! c;
	[a] & c;
	[a] | d;
	leave;
