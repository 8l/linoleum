(

    VARIABLE LZ/LZ77 COMPRESSOR / DECOMPRESSOR
    Written as part of the default L.in.oleum libaries, by Alessandro Ghignola
    --------------------------------------------------------------------------
    | Weighs:	       3628 bytes *
    | Allocates:    4179376 bytes **
    --------------------------------------------------------------------------
    | *  code size + initialized data size + stockfile parts size
    | ** uninitialized data size [RAM needed, symbols in workspace period]
    --------------------------------------------------------------------------
      This library is free software;  you can redistribute it and/or modify it
    under the terms of the  GNU Lesser General Public License  as published by
    the  Free Software Foundation;  either version 2.1	of the License, or, at
    your option, any later version.
      This  library  is  distributed  in the hope  that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
    or FITNESS FOR A PARTICULAR PURPOSE.
      See the GNU Lesser General Public License for more details.
      You should have received a copy of the GNU Lesser General Public License
    along with this library;  if not,  write to the  Free Software Foundation,
    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
    --------------------------------------------------------------------------
      Given this package's libraries conventions, functions are not assumed to
    care for preserving registers' contents, but they might preserve any entry
    parameters passed throught related variables.  This library is provided as
    part of the L.in.oleum compiler package's default libraries.

    --------------------------------------------------------------------------
    DESCRIPTION
    --------------------------------------------------------------------------
      Mmh... variable Lempel-Ziv, or Ziv-Lempel. LZ is pretty well-known, as
    well as the variable-to-variable version of LZ. It's not that bad. Other
    than that, this library performs LZ77 compression of repeated sequences,
    managing the typical sliding window over the past parts of the encoded and
    decoded datagrams. In particular, codes 0-44 of the Lempel-Ziv dictionary
    are reserved to mark repeating sequences, and followed by 6-13 bits giving
    the offset, to be considered as a negative offset, of the first byte to be
    repeated, plus another 3-6 bits indicating how many bytes are to be copied
    from there. Only one, or even none, of those bit fields may follow one of
    the reserved LZ codes: in such cases, the code itself is supposed to refer
    to a conventional table, the "z77 itab", that's used to determine whenever
    there's no real need for an offset+length couple, because the offset, the
    length, or both of them, are the same as those of the last repeat sequence
    which came with the previous block of data to repeat. It may appear weird,
    but it's not that unfrequent, in very redundant files, that such multiple
    occurrences of a sequence to repeat should appear straight one after the
    other, although the most repeately occuring combinations are those which
    refer to a block having the same length more than a block having the same
    relative offset. It's similar to what inflate/deflate do, but made simpler
    although, in effects, less efficient.

      Compression ratios here aren't very far from the several largely used
    compressors based on the deflate method [btw - implemented by Peterpaul in
    library "zlib.txt"], but as I said, it's simpler. Ratios are significantly
    influenced by the "chunk size", the size of a group of words that is read
    from the datagram before the Lempel-Ziv dictionary is cleared to adapt to
    another, possibly differently organized or having different entropy level,
    chunk of the datagram. With executables and binaries in general, a chunk
    size around 1536-3172 bytes, 1.5 to 3 kbytes, gives the best results. With
    plain texts and other more redundant files, a chunk size of 12 Kb tends to
    give best results. Here's a test made on a version of Lino's Icon Editor's
    Win32 executable file, using chunks of 1536 bytes, or 1.5 Kb:

	original			91,899 bytes, 89.7 Kb	100.0%
	compressed by this library	40,764 bytes, 39.8 Kb	 44.4%
	compressed by WinZip [deflate]	34,889 bytes, 34.0 Kb	 38.0%

      This is the compression of this program's symbols map <SMBLSMAP.TXT>, at
    a chunk size of 12,288 bytes, or 12 Kb; the text's very redundant, though,
    and the map produced by compiling my test program isn't the same produced
    by compiling a test program using this library that derived from it:

	original			68,350 bytes, 66.7 Kb	100.0%
	compressed by this library	12,595 bytes, 12.2 Kb	 18.4%
	compressed by WinZip [deflate]	10,675 bytes, 10.4 Kb	 15.6%

    --------------------------------------------------------------------------
    USAGE
    --------------------------------------------------------------------------
      The behaviour of "LZ" and of "unLZ" is very similar to that seen in the
    DHC library, for which details I'd suggest reading dhc.txt commentary. In
    short, here's a scheme of entry/exit values to and from the two routines.
    The only difference is that you have [lz chnksize] to initialize in place
    of an unsupported [lz wordsize], because this library was made to compress
    byte-aligned data only, so the wordsize is implicitly 8 bit, although it's
    still possible to insert padding bits between words via [lz wordfill].

	Synopsis for LZ:

    <step 1 - loading input parameters>
	[lz datagram] = pointer to bitstream to be compressed;
	[lz take bit] = n. of the 1st bit of the datagram to start from;
	[lz wordfill] = how many void bits may separate words in the data;
	[lz datasize] = number of words of the data;
	[lz chnksize] = number of words per chunk;
    <step 2 - loading output parameters>
	[lz data out] = pointer to bitstream to host the compressed packet;
	[lz give bit] = n. of 1st bit of above bitstream to start writing to;
	[lz size out] = total size in bits of the bitstream provided above;
    <step 3 - calling compressor, retrieving compressed bitstream size>
	=> LZ;
      ? ok -> alright;
      ? failed -> invalid parameters or LZ ran out of destination buffer;
    "alright"
	[resulting packet size in bits] = [lz bits out];

	Synopsis for unLZ:

    <step 1 - loading input parameters>
	[lz datagram] = pointer to compressed bitstream;
	[lz take bit] = n. of the 1st bit of the datagram to start from;
	[lz wordfill] = void bits separating words in the original data;
	[lz datasize] = number of words in the original datagram - OR - zero;
	[lz chnksize] = number of words per chunk used when compressing;
    <step 2 - loading output parameters>
	[lz data out] = pointer to bitstream to receive uncompressed data;
	[lz give bit] = n. of 1st bit of above bitstream to start writing to;
	[lz size out] = total size in bits of the bitstream provided above;
    <step 3 - calling decompressor, retrieving uncompressed bitstream size>
	=> unLZ;
      ? ok -> alright;
      ? failed -> invalid parameters or unLZ ran out of destination buffer;
    "alright"
	[resulting uncompressed data size in bytes] = [lz bits out];

      One further difference to be considered is that, not being intended for
    brief strings' cheap compression, LZ doesn't allow use of null-terminated
    datagrams by setting [lz datasize] to zero, which is instead possible with
    DHC library functions. LZ takes the number of words in the input datagram
    as it is: if it's zero, it results in an almost void output stream, only
    containing the end-of-data code. It doesn't cause the LZ function to stop
    when the first null code is found.
      So, if you wish to encode L.in.oleum strings this way, you have to count
    the characters forming the strings, and then tell LZ about that value via
    [lz datasize], other than setting [lz wordfill] to 24.
      Anyway, because of the presence of the end-of-data code, the end of the
    datagram can be marked while decompressing, so you don't need to know the
    original wordsize of the compressed datagram while using unLZ. But, for
    the sake of a decompressor that could result to be more stable, you can
    set [lz datasize] to the original datagram size in words: this way, unLZ
    will stop exactly after streaming that same amount of words to the output
    buffer. If, instead, you set [lz datasize] to zero before calling "unLZ",
    decompression will stop as soon as the end-of-data marker is found. The
    end of buffer condition, with consequential failure state of "unLZ", will
    be however taken in consideration, so if no end-of-data codes are found
    before the output buffer is full, decompression will stop, and fail, but
    it will not overwrite data beyond the end of the buffer anyway.

    --------------------------------------------------------------------------
    SEE ALSO
    --------------------------------------------------------------------------
    DHC.txt
    unLZ.txt

)

"libraries"

	bits;

"constants"

	z77 table size =   46;
	lz window size = 8192;
	lz winsize log =   13;
	lz maxwinblock =   64;
	lz blksize log =    6;

	lz dictstart   = minus z77 table size mtp 16;
	lz index rlen  = 4096 minus z77 table size minus 256;

"variables"

 vector z77 itab =
    (LZ index)	  (offset bits)   (counter bits)
    (------- variable LZ77 repeat codes -------)
       (00)	       13;		6;
       (01)	       13;		5;
       (02)	       13;		4;
       (03)	       13;		3;
       (04)	       12;		6;
       (05)	       12;		5;
       (06)	       12;		4;
       (07)	       12;		3;
       (08)	       11;		6;
       (09)	       11;		5;
       (10)	       11;		4;
       (11)	       11;		3;
       (12)	       10;		6;
       (13)	       10;		5;
       (14)	       10;		4;
       (15)	       10;		3;
       (16)		9;		6;
       (17)		9;		5;
       (18)		9;		4;
       (19)		9;		3;
       (20)		8;		6;
       (21)		8;		5;
       (22)		8;		4;
       (23)		8;		3;
       (24)		7;		6;
       (25)		7;		5;
       (26)		7;		4;
       (27)		7;		3;
       (28)		6;		6;
       (29)		6;		5;
       (30)		6;		4;
       (31)		6;		3;
    (------- "repeat last offset" codes -------)
 (i=i%4+32)		0;		6;
       (33)		0;		5;
       (34)		0;		4;
       (35)		0;		3;
    (------- "repeat last length" codes -------)
 (i=i/4+36)	       13;		0;
       (37)	       12;		0;
       (38)	       11;		0;
       (39)	       10;		0;
       (40)		9;		0;
       (41)		8;		0;
       (42)		7;		0;
       (43)		6;		0;
    (---- "repeat offset and length" code -----)
     (i=44)		0;		0;
    (----------- "end of data" code -----------)
     (i=45)	       (?)	       (?)

"workspace"

    (LZ/unLZ input parameters)
	lz datagram = 1;
	lz take bit = 1;
	lz wordfill = 1;
	lz datasize = 1;
	lz chnksize = 1;
	lz data out = 1;
	lz give bit = 1;
	lz size out = 1;

    (LZ/unLZ output parameters)
	lz bits out = 1;

    (internal variables)
	lz fail = 1;	(failure flag, set to 1 if out of destination buffer)
	lz cwin = 1;	(Current Words IN, determines when a chunk is over)
	lz dlen = 1;	(Dictionary LENgth, actually)
	lz inow = 1;	(Index bits NOW, bits to identify dictionary entries)
	lz imax = 1;	(Index MAX, kept equal to 2 ^ inow, gives dlen limits)
	lz blen = 1;	(Block LENgth, of last match found in dictionary)
	lz bind = 1;	(Block INDex, of last match found in dictionary)
	lz bend = 1;	(Block's END pointer, useful to update the dictionary)
	lz rwnd = 1;	(bit number, saved to ReWiND input stream when needed)
	lz wpos = 1;	(Window POSition, of next free unit of sliding window)
	lz wlen = 1;	(Window LENgth, how many units the window contains)
	lz earn = 1;	(EARNinings in bits of saving index instead of block)
	lz cmst = 1;	(Current Match STart in sliding window in search loop)
	lz wmst = 1;	(Window Match STart, the negative offset to be saved)
	lz wmat = 1;	(Window MATch size, n. of bytes forming said match)
	lz lmst = 1;	(Last Match STart, for use with "repeat last" codes)
	lz lmat = 1;	(Last MATch size, for use with "repeat last" codes)
	lz wmti = 1;	(Window Match Table Index, in z77 offset+length table)
	lz wmto = 1;	(Window Match Table Offset, wmto = wmti*2 + z77 itab)
	lz dumb = 1;	(dumb unit where to trash latest read word if needed)

    (internal vectors - words' indexing used to speed up dictionary searchs)
	lz blck = 15;					(holds current block)
	lz ilen = 256;					(word indexs' length)
	lz indx = 256 mtp lz index rlen;		(words' indexs)
	lz dict = 4097 minus z77 table size mtp 16;	(the LZ dictionary)
	lz wind = lz window size;			(LZ77 sliding window)

"programme"

(>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>)
"LZ"
	[lz fail] = false;
	[bit stream pointer] = [lz datagram];
	[starting bit number] = [lz take bit];
	[lz bits out] = [lz give bit];
      ? [lz datasize] = 0 -> lz complete;
	[lz cwin] = 0;
	[lz wpos] = 0;
	[lz wlen] = 0;
	[lz rwnd] = 0;
	[lz lmst] = minus 1;
	[lz lmat] = minus 1;
	=> lz reset;
	=> lz index reset;
    "lz data loop"
	[lz blen] = 0;
	[lz datasize] -->;
    "lz block loop"
	[bit field size] = 8;
	=> get bit field;
	a = [lz blen];
	[a relating lz blck] = [bit field content];
	[starting bit number] + 8;
	[starting bit number] + [lz wordfill];
	[lz blen] +;
      ? a = 0 -> lz quick one byte block;
	=> lz search block;
      ? ok -> lz consolidate block;
	[starting bit number] - 8;
	[starting bit number] - [lz wordfill];
	[lz blen] -;
	-> lz endofblock;
    "lz quick one byte block"
	a = [bit field content];
	a + z77 table size;
    "lz consolidate block"
	[lz bind] = a;
      ? [lz blen] = 15 -> lz endofblock;
	[lz datasize] ^ lz block loop;
    "lz endofblock"
	<-- [lz datasize];
	[lz earn] = [lz blen];
	[lz earn] < 3;
	[lz earn] - [lz inow];
	[starting bit number] -->;
	[lz wmat] = 0;
	a = [lz wlen];
      ? a = zero -> lz window is empty;
	b = [lz wpos];
	b - [lz wlen];
	b & lz window size minus 1;
	c = [lz blck];
    "lz search in window"
      ? c != [b relating lz wind] -> lz keep searching;
	a -->;
	b -->;
	c -->;
	[lz datasize] -->;
	d = 1;
	[lz cmst] = a;
	[starting bit number] = [lz rwnd];
	[lz datasize] -;
      ? [lz datasize] = 0 -> lz stop scanning;
    "lz keep scanning"
	b +;
	b & lz window size minus 1;
      ? b = [lz wpos] -> lz stop scanning;
	[starting bit number] + 8;
	b -->; d -->; => get bit field; <-- d; <-- b;
      ? [bit field content] != [b relating lz wind] -> lz stop scanning;
	d +;
      ? d = lz maxwinblock -> lz stop scanning;
	[lz datasize] ^ lz keep scanning;
    "lz stop scanning"
      ? d < [lz wmat] -> lz no match record;
	[lz wmst] = [lz cmst];
	[lz wmst] -;
	[lz wmat] = d;
      "lz no match record"
	<-- [lz datasize];
	<-- c;
	<-- b;
	<-- a;
    "lz keep searching"
	b +;
	b & lz window size minus 1;
	a ^ lz search in window;
    "lz window is empty"
	<-- [starting bit number];
      ? [lz wmat] = 0 -> lz no relevant window match;
	a = [lz wmat];
	a < 3;
	a - [lz inow];
	a - lz winsize log plus lz blksize log;
      ? a <= [lz earn] -> lz no relevant window match;
	a = vector z77 itab;
	b = 32; (valid codes in table)
	c = greatest signed integer;
    "lz search index in z77 table"
	e = 1;
	e < [a plus 0];
	e -;
      ? [lz wmst] > e -> lz sis skip;
	e = 1;
	e < [a plus 1];
      ? [lz wmat] > e -> lz sis skip;
	e = [a plus 0];
	e + [a plus 1];
      ? e >= c -> lz sis skip;
	c = e;
	d = a;
      "lz sis skip"
	a + 2;
	b ^ lz search index in z77 table;
	d - vector z77 itab;
	d > 1;
	[lz wmti] = d;
      ? [lz wmst] != [lz lmst] -> lz cant repeat last match offset;
      ? [lz wmat] != [lz lmat] -> lz repeat last match offset;
	[lz wmti] = 44;
	-> lz repeat both;
    "lz repeat last match offset"
	[lz wmti] & 3;
	[lz wmti] + 32;
    "lz cant repeat last match offset"
      ? [lz wmat] != [lz lmat] -> lz cant repeat last match size;
	[lz wmti] > 2;
	[lz wmti] + 36;
    "lz cant repeat last match size" (or) "lz repeat both"
	[lz wmto] = [lz wmti];
	[lz wmto] < 1;
	[lz wmto] + vector z77 itab;
	[lz lmst] = [lz wmst];
	[lz lmat] = [lz wmat];
	a = [lz wmto];
	[bit stream pointer] -->;
	[starting bit number] -->;
	[bit stream pointer] = [lz data out];
	[starting bit number] = [lz bits out];
	[bit field size] = [lz inow];
	[bit field content] = [lz wmti];
	=> lz stream code;
	[bit field size] = [a plus 0];
	[bit field content] = [lz wmst];
	=> lz stream code;
	[bit field size] = [a plus 1];
	[bit field content] = [lz wmat];
	[bit field content] -;
	=> lz stream code;
	[lz bits out] = [starting bit number];
	<-- [starting bit number];
	<-- [bit stream pointer];
	[starting bit number] = [lz rwnd];
	a = [lz wmat];
	=> lz update window;
	[lz rwnd] = [starting bit number];
	[lz datasize] - [lz wmat];
	[lz cwin] + [lz wmat];
      ? [lz fail] = true -> lz complete;
      ? [lz datasize] = 0 -> lz complete;
      ? [lz cwin] < [lz chnksize] -> lz data loop;
	[lz cwin] - [lz chnksize];
	=> lz reset;
	=> lz index reset;
	-> lz data loop;
    "lz no relevant window match"
	[starting bit number] -->;
	[starting bit number] = [lz rwnd];
	a = [lz blen];
	=> lz update window;
	<-- [starting bit number];
	[lz rwnd] = [starting bit number];
	[bit stream pointer] -->;
	[starting bit number] -->;
	[bit stream pointer] = [lz data out];
	[starting bit number] = [lz bits out];
	[bit field size] = [lz inow];
	[bit field content] = [lz bind];
	=> lz stream code;
	[lz bits out] = [starting bit number];
	<-- [starting bit number];
	<-- [bit stream pointer];
	[lz datasize] - [lz blen];
	[lz cwin] + [lz blen];
      ? [lz fail] = true -> lz complete;
      ? [lz datasize] = 0 -> lz complete;
      ? [lz cwin] < [lz chnksize] -> lz keep chunk;
	[lz cwin] - [lz chnksize];
	=> lz reset;
	=> lz index reset;
	-> lz data loop;
    "lz keep chunk"
      ? [lz dlen] = 4096 -> lz data loop;
      ? [lz blen] = 15 -> lz data loop;
	[bit field size] = 8;
	=> get bit field;
	a = [lz bind];
	b = [lz dlen];
	a < 4;
	b < 4;
	c = [a plus lz dictstart relating lz dict];
	[b plus lz dictstart relating lz dict] = c;
	[b plus lz dictstart relating lz dict] +;
    "lz add block"
	[b plus lz dictstart plus 1 relating lz dict] = [a plus lz dictstart plus 1 relating lz dict];
	a +;
	b +;
	c ^ lz add block;
	[b plus lz dictstart plus 1 relating lz dict] = [bit field content];
	a = [bit field content];
	b = [bit field content];
	a * lz index rlen;
	a + [b relating lz ilen];
	[b relating lz ilen] +;
	[a relating lz indx] = [lz dlen];
	[lz dlen] +;
      ? [lz dlen] <= [lz imax] -> lz data loop;
	[lz inow] +;
	[lz imax] < 1;
	-> lz data loop;
    "lz complete"
	[bit stream pointer] = [lz data out];
	[starting bit number] = [lz bits out];
	[bit field size] = [lz inow];
	[bit field content] = z77 table size minus 1; (end of data)
	=> lz stream code;
	[lz bits out] = [starting bit number];
	[lz bits out] - [lz give bit];
      ? [lz fail] = true -> lz failure;
	end;
      "lz failure"
	fail;
    "lz search block"
	b = [lz blen];
	c = [b minus 1 relating lz blck];
	b = [c relating lz ilen];
	c * lz index rlen;
      ? b != zero -> lz frumple the index;
	fail;
    "lz frumple the index"
	a = [c relating lz indx];
	e = [lz blen];
	a < 4;
	d = 0;
      ? e != [a plus lz dictstart relating lz dict] -> lz not this;
    "lz cmp loop"
      ? [a plus lz dictstart plus 1 relating lz dict] != [d relating lz blck] -> lz not this;
	a +;
	d +;
	e ^ lz cmp loop;
	a > 4;
	end;
    "lz not this"
	c +;
	b ^ lz frumple the index;
	fail;
    "lz update window"
	[bit field size] = 8;
    "lz uw loop"
	a -->; => get bit field; <-- a;
	[starting bit number] + 8;
	[starting bit number] + [lz wordfill];
	b = [lz wpos];
	[b relating lz wind] = [bit field content];
	[lz wpos] +;
	[lz wpos] & lz window size minus 1;
      ? [lz wlen] = lz window size -> lz window is full;
	[lz wlen] +;
      "lz window is full"
	a ^ lz uw loop;
	end;
    "lz index reset"
	a = 256;
      "lz ir loop"
	[a minus 1 relating lz ilen] = 0;
	a ^ lz ir loop;
	end;

(>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>)
"unLZ"
	[lz fail] = false;
	[bit stream pointer] = [lz datagram];
	[starting bit number] = [lz take bit];
	[lz bits out] = [lz give bit];
	[lz cwin] = 0;
	[lz wpos] = 0;
	[lz wlen] = 0;
	=> lz reset;
    "unlz data loop"
	[bit field size] = [lz inow];
	=> get bit field;
	[starting bit number] + [lz inow];
      ? [bit field content] = 45 -> lz complete; (end of data)
      ? [bit field content] >= z77 table size -> unlz no repeat sequence;
	[lz wmto] = [bit field content];
	[lz wmto] < 1;
	[lz wmto] + vector z77 itab;
	c = [lz wmto];
	[bit field size] = [c plus 0];
      ? [bit field size] != zero -> unlz really read wmst;
	[lz wmst] = [lz lmst];
	-> unlz used last wmst;
      "unlz really read wmst"
	=> get bit field;
	[starting bit number] + [bit field size];
	[lz wmst] = [bit field content];
	[lz lmst] = [bit field content];
      "unlz used last wmst"
	a = [lz wpos];
	a - [lz wmst]; a -;
	a & lz window size minus 1;
	b = [lz bend];
	[b] = [a relating lz wind];
	[lz bend] = lz dumb;
	c = [lz wmto];
	[bit field size] = [c plus 1];
      ? [bit field size] != zero -> unlz really read wmat;
	[lz wmat] = [lz lmat];
	-> unlz used last wmat;
      "unlz really read wmat"
	a -->; => get bit field; <-- a;
	[starting bit number] + [bit field size];
	[lz wmat] = [bit field content];
	[lz lmat] = [bit field content];
      "unlz used last wmat"
	[lz wmat] +;
	b = [lz wmat];
	[bit stream pointer] -->;
	[starting bit number] -->;
	[bit stream pointer] = [lz data out];
	[starting bit number] = [lz bits out];
    "unlz copy sequence"
	[bit field content] = [a relating lz wind];
	[bit field size] = 8;
	=> lz stream code;
	=> unlz update window;
	[bit field content] = 0;
	[bit field size] = [lz wordfill];
	=> lz stream code;
	a +;
	a & lz window size minus 1;
	b ^ unlz copy sequence;
	[lz bits out] = [starting bit number];
	<-- [starting bit number];
	<-- [bit stream pointer];
	[lz cwin] + [lz wmat];
	[lz datasize] - [lz wmat];
      ? [lz fail] = true -> lz complete;
      ? [lz datasize] = 0 -> lz complete;
      ? [lz cwin] < [lz chnksize] -> unlz data loop;
	[lz cwin] - [lz chnksize];
	=> lz reset;
	-> unlz data loop;
    "unlz no repeat sequence"
	[bit stream pointer] -->;
	[starting bit number] -->;
	[bit stream pointer] = [lz data out];
	[starting bit number] = [lz bits out];
	a = [bit field content];
      (anti-crash provision)
      ? a < [lz dlen] -> unlz ac jump;
	[lz fail] = true;
	$ + 2; -> lz complete;
      "unlz ac jump"
      (end anti-crash provision)
	a < 4;
	b = [lz bend];
	[b] = [a plus lz dictstart plus 1 relating lz dict];
	b = [lz dlen];
	b < 4;
	b + lz dictstart plus lz dict;
	c = [a plus lz dictstart relating lz dict];
	[b] = c;
	[b] +;
	[lz blen] = c;
    "unlz output block"
	[bit field size] = 8;
	[bit field content] = [a plus lz dictstart plus 1 relating lz dict];
	=> lz stream code;
	=> unlz update window;
	[bit field size] = [lz wordfill];
	[bit field content] = 0;
	=> lz stream code;
	[b plus 1] = [a plus lz dictstart plus 1 relating lz dict];
	a +;
	b +;
	c ^ unlz output block;
	[lz bits out] = [starting bit number];
	[lz bend] = b; [lz bend] +;
	<-- [starting bit number];
	<-- [bit stream pointer];
	[lz cwin] + [lz blen];
	[lz datasize] - [lz blen];
      ? [lz fail] = true -> lz complete;
      ? [lz datasize] = 0 -> lz complete;
      ? [lz cwin] < [lz chnksize] -> unlz keep chunk size;
	[lz cwin] - [lz chnksize];
	=> lz reset;
	-> unlz data loop;
    "unlz keep chunk size"
      ? [lz dlen] = 4096 -> unlz data loop;
      ? [lz blen] = 15 -> unlz data loop;
	[lz dlen] +;
      ? [lz dlen] <= [lz imax] -> unlz data loop;
	[lz inow] +;
	[lz imax] < 1;
	-> unlz data loop;
    "unlz update window"
	a -->;
	a = [lz wpos];
	[a relating lz wind] = [bit field content];
	<-- a;
	[lz wpos] +;
	[lz wpos] & lz window size minus 1;
      ? [lz wlen] = lz window size -> unlz window is full;
	[lz wlen] +;
    "unlz window is full"
	end;

(>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>)
"lz reset"
	a = z77 table size mtp 16;
	b = 0;
	c = 256;
    "lz init dictionary"
	[a plus lz dictstart plus 0 relating lz dict] = 1;
	[a plus lz dictstart plus 1 relating lz dict] = b;
	a + 16;
	b +;
	c ^ lz init dictionary;
	[lz inow] = 9;
	[lz imax] = 512;
	[lz dlen] = z77 table size plus 256;
	[lz bend] = lz dumb;
	end;

(>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>)
"lz stream code"
	a -->;
	a = [starting bit number];
	b -->;
	a + [bit field size];
	c -->;
      ? a > [lz size out] -> lz out of buffer;
	=> set bit field;
	[starting bit number] + [bit field size];
	<-- c;
	<-- b;
	<-- a;
	end;
    "lz out of buffer"
	[lz fail] = true;
	<-- c;
	<-- b;
	<-- a;
	fail;
